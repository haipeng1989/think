#include "stdafx.h"


#include "stdio.h"
#include <iostream>
#include <string>
using namespace std;

/*
找到路线:(0, 0) - (0, 1) - (1, 1) - (2, 1) - (3, 1) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (2, 1) - (3, 1) - (3, 2) - (2, 2) - (2, 3) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (2, 1) - (2, 2) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (2, 1) - (2, 2) - (2, 3) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (1, 2) - (2, 2) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (1, 2) - (2, 2) - (2, 3) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (1, 1) - (1, 2) - (2, 2) - (2, 1) - (3, 1) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (2, 2) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (2, 2) - (2, 3) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (2, 2) - (2, 1) - (3, 1) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (1, 1) - (2, 1) - (3, 1) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (1, 1) - (2, 1) - (3, 1) - (3, 2) - (2, 2) - (2, 3) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (1, 1) - (2, 1) - (2, 2) - (3, 2) - (3, 3)
找到路线 : (0, 0) - (0, 1) - (0, 2) - (1, 2) - (1, 1) - (2, 1) - (2, 2) - (2, 3) - (3, 3)
最短路线为 : (0, 0) - (0, 1) - (1, 1) - (2, 1) - (3, 1) - (3, 2) - (3, 3)
*/

int t[4][4] = {
	{ 1,1,1,1 },
	{ 0,1,1,0 },
	{ 1,1,1,1 },
	{ 0,1,1,1 }
};
int mk[100][100] = { 0 };
int m = 4;
int n = 4;
string smin = "";

string getStr(int x) {
	if (x == 0) {
		return "0";
	}
	else if (x == 1) {
		return "1";
	}
	else if (x == 2) {
		return "2";
	}
	else if (x == 3) {
		return "3";
	}
	else if (x == 4) {
		return "4";
	}
	return "0";
}

void dfs(int x, int y, string s) {
	if (x < 0 || y < 0)			
		return;		
	
	if (x > m - 1 || y > m - 1 || mk[x][y] != 0)			
		return;		
	
	if (t[x][y] == 0)
		return; // 判断是否通路和越界		
	
	if (x == m - 1 && y == n - 1) { // 判断是否抵达出口			
		s += "(" + getStr(x);
		s += "," + getStr(y);
		s += ")";
		
		if (smin.length() == 0 || smin.length() > s.length())				
			smin = s;			
		
		printf("找到路线: %s\n", s.c_str());
		return;	
	}		
	string temp = s;
	s += "(" + getStr(x);
	s += "," + getStr(y);
	s += ")-"; // 记录路线		
	
	mk[x][y] = 1; // 将走过的路标记		
	
	// 向四个方向搜索
	dfs(x + 1, y, s);		
	dfs(x, y + 1, s);		
	dfs(x, y - 1, s);		
	dfs(x - 1, y, s);		
	
	// 将路线和标记恢复成上一次的状态		
	mk[x][y] = 0;		
	
	s = temp;	
}


int main()
{
	dfs(0, 0, "");
	if (smin.length() != 0)
		printf("最短路线为: %s\n", smin.c_str());
	else
		printf("没有找到路线！\n");

	return 0;
}